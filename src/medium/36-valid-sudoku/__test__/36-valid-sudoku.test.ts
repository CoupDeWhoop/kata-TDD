import { Board, Solution } from "../36-valid-sudoku";

describe("Valid sudoku", () => {
  it("should return correctly for given boards", () => {
    const solution = new Solution();

    const board1: Board = [
      ["1", "2", ".", ".", "3", ".", ".", ".", "."],
      ["4", ".", ".", "5", ".", ".", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", ".", "3"],
      ["5", ".", ".", ".", "6", ".", ".", ".", "4"],
      [".", ".", ".", "8", ".", "3", ".", ".", "5"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", ".", ".", ".", ".", ".", "2", ".", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "8"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];

    const board2: Board = [
      ["1", "2", ".", ".", "3", ".", ".", ".", "."],
      ["4", ".", ".", "5", ".", ".", ".", ".", "."],
      [".", "9", "1", ".", ".", ".", ".", ".", "3"],
      ["5", ".", ".", ".", "6", ".", ".", ".", "4"],
      [".", ".", ".", "8", ".", "3", ".", ".", "5"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", ".", ".", ".", ".", ".", "2", ".", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "8"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];

    const board3: Board = [
      ["8", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];

    const board4: Board = [
      ["5", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];

    expect(solution.isValidSudoku(board1)).toBe(true);
    expect(solution.isValidSudoku(board2)).toBe(false);
    expect(solution.isValidSudoku(board3)).toBe(false);
    expect(solution.isValidSudoku(board4)).toBe(true);
  });

  it("should return true for this test despite it not being a valid board", () => {
    const solution = new Solution();
    const board5: Board = [
      ["1", "2", "3", "4", "5", "6", "7", "8", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "2"],
      [".", ".", ".", ".", ".", ".", ".", ".", "3"],
      [".", ".", ".", ".", ".", ".", ".", ".", "4"],
      [".", ".", ".", ".", ".", ".", ".", ".", "5"],
      [".", ".", ".", ".", ".", ".", ".", ".", "6"],
      [".", ".", ".", ".", ".", ".", ".", ".", "7"],
      [".", ".", ".", ".", ".", ".", ".", ".", "8"],
      [".", ".", ".", ".", ".", ".", ".", ".", "9"],
    ];

    expect(solution.isValidSudoku(board5)).toBe(true);
  });
});
